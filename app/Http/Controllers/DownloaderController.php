<?php

namespace App\Http\Controllers;

use App\Events\InicioDescarga;
use App\Jobs\DownloadMp3;
use App\Jobs\DownloadMp3PROD;
use App\Jobs\DownloadVideo;
use App\Jobs\DownloadVideoPROD;
use App\Jobs\DownloadWav;
use App\Jobs\DownloadWavPROD;
use App\Models\Video;
use Illuminate\Http\Request;
use Symfony\Component\Process\Process;

class DownloaderController extends Controller
{
    public function index()
    {
        return view('videos.index');
    }

    public function prepare(Request $request)
    {

        $format = $request->input('format');

        // Recibir las cookies enviadas desde el frontend porque youtube necesita cookies validas para dejar descargar el video
        $cookies = $this->convertCookieToNetscapeFormat($request->input('cookies')); // La cookie se convierte al formao requerido por youtube

        // Crear el video y almacenar las cookies
        $video = Video::create([
            'url' => $request->input('url'),
            'format' => $format,
        ]);

        event(new InicioDescarga("Inicio de descarga"));

        // Despachar el job correspondiente según el formato
        switch ($format) {
            case 'mp4':
                DownloadVideoPROD::dispatch($video, $cookies);
                break;
            case 'mp3':
                DownloadMp3PROD::dispatch($video, $cookies);
                break;
            case 'wav':
                DownloadWavPROD::dispatch($video, $cookies);
                break;
        }

        // return redirect()->route('status', ['video' => $video->id]);
    }

    function convertCookieToNetscapeFormat($cookie, $domain = ".youtube.com", $path = "/", $expiration = 0)
    {
        // Encabezado del archivo Netscape (opcional, pero recomendable)
        $lines = [
            "# Netscape HTTP Cookie File",
            "# This file was generated by PHP",
            ""
        ];

        // Separamos la cadena en pares basados en el delimitador ";"
        $cookiePairs = explode(";", $cookie);

        foreach ($cookiePairs as $pair) {
            $pair = trim($pair);
            if (empty($pair)) {
                continue;
            }

            // Separamos el nombre y el valor (usando "=" como separador, solo en el primer "=")
            $parts = explode("=", $pair, 2);
            if (count($parts) !== 2) {
                continue;
            }
            $name  = trim($parts[0]);
            $value = trim($parts[1]);

            // Formateamos la línea según el estándar Netscape:
            // <dominio> <flag> <path> <secure> <expiration> <nombre> <valor>
            // Se usa "TRUE" para permitir subdominios, "FALSE" para secure (si no lo requieres) y 0 para cookies de sesión.
            $lines[] = sprintf("%s\tTRUE\t%s\tFALSE\t%d\t%s\t%s", $domain, $path, $expiration, $name, $value);
        }

        // Unir todas las líneas en una sola cadena
        return implode("\n", $lines);
    }

    public function status(Video $video)
    {
        return view('videos.status', ['video' => $video]);
    }

    public function download(Video $video)
    {
        abort_if($video->status !== 'completed', 404);

        return response()->download(storage_path('app/public/videos/' . $video->info['title'] . '.' . $video->info['ext']));
    }
}
